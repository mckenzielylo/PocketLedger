# =============================================================================
# Single-stage Dockerfile optimized for Render.com deployment
# Simplified build process to avoid Node.js build issues
# =============================================================================

FROM php:8.2-fpm-alpine

# =============================================================================
# SYSTEM DEPENDENCIES
# =============================================================================
RUN apk add --no-cache \
    # Basic utilities
    bash \
    curl \
    wget \
    unzip \
    git \
    # Node.js and npm for asset building
    nodejs \
    npm \
    # Build tools
    build-base \
    autoconf \
    libtool \
    pkgconfig \
    # PHP extensions dependencies
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    libzip-dev \
    icu-dev \
    oniguruma-dev \
    postgresql-dev \
    # Supervisor for process management
    supervisor \
    nginx

# =============================================================================
# PHP EXTENSIONS
# =============================================================================
# Install PHP extensions one by one to avoid conflicts
RUN docker-php-ext-install -j$(nproc) pdo pdo_pgsql

RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) gd

RUN docker-php-ext-install -j$(nproc) zip intl mbstring bcmath opcache

# =============================================================================
# COMPOSER INSTALLATION
# =============================================================================
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# =============================================================================
# APPLICATION SETUP
# =============================================================================
WORKDIR /var/www/html

# Copy application files
COPY . .

# Set minimal environment for Composer
ENV APP_ENV=production
ENV APP_KEY=base64:temp-key-for-build
ENV DB_CONNECTION=pgsql

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader --no-interaction --no-scripts

# Install Node.js dependencies and build assets
RUN npm install && npm run build

# =============================================================================
# PERMISSIONS
# =============================================================================
# Create required directories
RUN mkdir -p /var/www/html/storage/logs \
    && mkdir -p /var/www/html/storage/framework/cache \
    && mkdir -p /var/www/html/storage/framework/sessions \
    && mkdir -p /var/www/html/storage/framework/views \
    && mkdir -p /var/www/html/bootstrap/cache

# Set proper ownership and permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 775 /var/www/html/storage \
    && chmod -R 775 /var/www/html/bootstrap/cache

# =============================================================================
# NGINX CONFIGURATION
# =============================================================================
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/default.conf /etc/nginx/http.d/default.conf

# =============================================================================
# SUPERVISOR CONFIGURATION
# =============================================================================
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# =============================================================================
# ENTRYPOINT
# =============================================================================
COPY docker/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# =============================================================================
# EXPOSE PORTS
# =============================================================================
EXPOSE 80

# =============================================================================
# STARTUP
# =============================================================================
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
