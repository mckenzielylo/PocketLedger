# =============================================================================
# Ultra-optimized Dockerfile for maximum build speed
# Multi-stage build to minimize permission operations
# =============================================================================

# =============================================================================
# STAGE 1: Node.js Build Stage
# =============================================================================
FROM node:18-alpine AS node-builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy source files
COPY . .

# Build assets
RUN npm run build

# =============================================================================
# STAGE 2: PHP Production Stage
# =============================================================================
FROM php:8.2-fpm-alpine AS production

# =============================================================================
# SYSTEM DEPENDENCIES
# =============================================================================
RUN apk add --no-cache \
    bash \
    curl \
    git \
    nodejs \
    npm \
    build-base \
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    libzip-dev \
    postgresql-dev \
    oniguruma-dev \
    supervisor \
    nginx

# =============================================================================
# PHP EXTENSIONS
# =============================================================================
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
        pdo \
        pdo_pgsql \
        gd \
        zip \
        mbstring \
        bcmath

# =============================================================================
# COMPOSER
# =============================================================================
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# =============================================================================
# APPLICATION SETUP
# =============================================================================
WORKDIR /var/www/html

# Set minimal environment for Composer
ENV APP_ENV=production
ENV APP_KEY=base64:temp-key-for-build
ENV DB_CONNECTION=pgsql

# Copy composer files first
COPY composer.json composer.lock ./

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader --no-interaction --no-scripts

# Copy application code (excluding large directories)
COPY app/ ./app/
COPY config/ ./config/
COPY database/ ./database/
COPY resources/ ./resources/
COPY routes/ ./routes/
COPY artisan ./
COPY .env.example ./

# Copy built assets from Node.js stage
COPY --from=node-builder /app/public/build ./public/build

# =============================================================================
# DIRECTORY SETUP (Minimal)
# =============================================================================
# Create only required directories
RUN mkdir -p storage/logs \
    && mkdir -p storage/framework/cache \
    && mkdir -p storage/framework/sessions \
    && mkdir -p storage/framework/views \
    && mkdir -p bootstrap/cache

# Set ownership only for required directories (much faster)
RUN chown -R www-data:www-data storage bootstrap/cache public \
    && chmod -R 775 storage bootstrap/cache

# =============================================================================
# NGINX & SUPERVISOR
# =============================================================================
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/default.conf /etc/nginx/http.d/default.conf
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# =============================================================================
# STARTUP
# =============================================================================
# Use PORT environment variable for Render.com compatibility
ENV PORT=10000
EXPOSE $PORT
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
